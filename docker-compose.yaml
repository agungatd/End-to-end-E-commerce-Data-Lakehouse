x-airflow-common:
  &airflow-common
  build: ./containers/airflow/.
  environment:
    &airflow-common-env
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
    - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__WEBSERVER__SECRET_KEY}
    - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./containers/airflow/logs:/opt/airflow/logs
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  entrypoint: /entrypoint.sh
  depends_on:
    postgres:
      condition: service_healthy
      
name: ecom-lakehouse
services:
  # airflow-db:
  #   image: postgres:13-alpine3.20
  #   container_name: airflow-db
  #   environment:
  #     POSTGRES_USER: airflow
  #     POSTGRES_PASSWORD: airflow
  #     POSTGRES_DB: airflow
  #   volumes:
  #     - airflow-db-pg-db-vol:/var/lib/postgresql/data
  #   ports:
  #     - 5433:5432
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "postgres"]
  #     interval: 60s
  #     retries: 5
  #   restart: always
  #   networks:
  #     default_network:
  # postgres service is a db for storing the source dummy data.
  postgres:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_DB: ecommerce
    volumes:
      - ecom-lakehouse-pg-db-vol:/var/lib/postgresql/data
      - ./data/initial_dummy:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 60s
      retries: 5
    restart: always
    networks:
      default_network:

  # airflow-webserver:
  #   <<: *airflow-common
  #   container_name: airflow-webserver
  #   command: webserver
  #   ports:
  #     - 8081:8080
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
  #     interval: 60s
  #     timeout: 10s
  #     retries: 5
  #   restart: always
  #   networks:
  #     default_network:

  # airflow-scheduler:
  #   <<: *airflow-common
  #   container_name: airflow-scheduler
  #   command: scheduler
  #   healthcheck:
  #     test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
  #     interval: 60s
  #     timeout: 10s
  #     retries: 5
  #   restart: always
  #   networks:
  #     default_network:
  
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    build: spark/
    networks:
      default_network:
    depends_on:
      - rest
      - minio
    volumes:
      - ./data/warehouse:/home/iceberg/warehouse
      - ./notebooks:/home/iceberg/notebooks/notebooks
      # - ./spark/jars:/opt/spark/jars
      # - ./spark/scripts:/opt/spark/jobs
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    networks:
      default_network:
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=ap-southeast-3
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      default_network:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      default_network:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=ap-southeast-3
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "     

networks:
  default_network:

volumes:
  ecom-lakehouse-pg-db-vol:
  airflow-db-pg-db-vol:
  minio_data:
