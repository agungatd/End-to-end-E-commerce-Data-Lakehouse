x-airflow-common:
  &airflow-common
  build: 
    context: ./containers/airflow/.
    args: 
      - AIRFLOW_ADMIN_USER=$AIRFLOW_ADMIN_USER
      - AIRFLOW_ADMIN_FIRST_NAME=$AIRFLOW_ADMIN_FIRST_NAME
      - AIRFLOW_ADMIN_LAST_NAME=$AIRFLOW_ADMIN_LAST_NAME
      - AIRFLOW_ADMIN_EMAIL=$AIRFLOW_ADMIN_EMAIL
      - AIRFLOW_ADMIN_PASS=$AIRFLOW_ADMIN_PASS
  environment:
    &airflow-common-env
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
    - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW__WEBSERVER__SECRET_KEY}
    - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY}
    - AIRFLOW__CORE__TEST_CONNECTION=true
  env_file: '.env'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./containers/airflow/logs:/opt/airflow/logs
    - ./.env:/opt/airflow/dags/.env
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  entrypoint: /entrypoint.sh
  depends_on:
    postgres:
      condition: service_healthy
      
name: ecom-lakehouse
services:

  web:
    build: 
      context: ./containers/flask-api/
      target: builder
    container_name: flask_server
    profiles: ["api"]
    stop_signal: SIGINT
    ports:
      - "5001:5000"
    depends_on:
      - postgres
    volumes:
      - ./containers/flask-api/app/app.py:/app/app.py
    networks:
      default_network:

  airflow-db:
    image: postgres:13-alpine3.20
    container_name: airflow-db
    profiles: ["lakehouse"]
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-db-vol:/var/lib/postgresql/data
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 60s
      retries: 5
    restart: always
    networks:
      default_network:
  ## postgres service is a db for storing the source dummy data.
  postgres:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_DB: ecommerce
    volumes:
      - ecom-lakehouse-pg-db-vol:/var/lib/postgresql/data
      - ./data/initial_dummy:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 60s
      retries: 5
    restart: always
    networks:
      default_network:

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    profiles: ["lakehouse"]
    ports:
      - 8081:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      default_network:
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    profiles: ["lakehouse"]
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 60s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      default_network:
  
  spark-iceberg:
    image: ecom-lakehouse-spark-iceberg
    build: containers/spark/
    container_name: spark-iceberg
    profiles: ["lakehouse", "spark-iceberg"]
    networks:
      default_network:
    depends_on:
      - rest
      - minio
    volumes:
      - ./notebooks:/home/iceberg/notebooks/notebooks
      - ./spark/jobs:/home/spark/jobs
      - ./spark/tests:/home/spark/tests
      - ./containers/spark/docker.env:/home/spark/docker.env
    env_file: ".env"
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    profiles: ["lakehouse", "spark-iceberg", "dashboard"]
    networks:
      default_network:
    ports:
      - 8181:8181
    env_file: ".env"

  minio:
    image: minio/minio
    container_name: minio
    env_file: ".env"
    profiles: ["lakehouse", "spark-iceberg", "dashboard"]
    networks:
      default_network:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    profiles: ["lakehouse", "spark-iceberg"]
    networks:
      default_network:
    env_file: ".env"
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "
   
  trino:
    image: trinodb/trino:467
    container_name: trino
    profiles: ["lakehouse", "dashboard"]
    networks:
      default_network:
    ports:
      - 8082:8080
    depends_on:
      - rest
      - minio
    volumes:
      - ./containers/trino/catalog:/etc/trino/catalog
      # - ./containers/trino/plugin:/usr/lib/trino/plugin
    env_file: ".env"
    healthcheck:
      test: curl --fail -I http://localhost:8080/v1/info || exit 1
      interval: 60s
      timeout: 5s
      retries: 5

  metabase:
    image: metabase/metabase:v0.52.2.6
    container_name: metabase
    hostname: metabase
    profiles: ["lakehouse", "dashboard"]
    volumes:
      - ./containers/metabase/plugins:/plugins
      - ./containers/metabase/data:/metabase-data
    ports:
      - 3000:3000
    env_file: ".env"
    depends_on:
      - postgres
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 60s
      timeout: 5s
      retries: 5
    networks:
      default_network:


networks:
  default_network:

volumes:
  ecom-lakehouse-pg-db-vol:
  airflow-db-vol:
  minio_data:
